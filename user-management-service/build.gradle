plugins {
    id "idea"
    id "org.springframework.boot"
    id "org.springframework.cloud.contract"
    id "org.unbroken-dome.test-sets"
}
dependencies {
    implementation(project(":contract-sdk"))
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.flywaydb:flyway-core")
    runtimeOnly("org.postgresql:postgresql")

    implementation("com.querydsl:querydsl-jpa")
    annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation("io.rest-assured:spring-mock-mvc")

    // 契约测试
    testImplementation('org.springframework.cloud:spring-cloud-contract-verifier')
    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-stub-runner")

    // 集成测试
    testImplementation("io.zonky.test:embedded-database-spring-test")
    testImplementation("it.ozimov:embedded-redis")
}

testSets {
    isolationTest {
        dirName = "isolationTest"
    }
}

contracts {
    testFramework = "JUNIT5"
    failOnNoContracts = false
    sourceSet = "contractTest"
    baseClassForTests = "com.mflyyou.contract.BaseContractTest"
    contractsDslDir = new File("${projectDir}/src/contractTest/resources")
    baseClassMappings {
        baseClassMapping(".*usermgmt.user.*", "com.mflyyou.contract.user.BaseContractUserTest")
    }
}
contractTest.shouldRunAfter test
isolationTest.shouldRunAfter test
check.dependsOn contractTest
check.dependsOn isolationTest

publishing {
    repositories {
        maven {
            allowInsecureProtocol=true
            url = project.version.endsWith("SNAPSHOT") ? "$mavenSnapshotsUrl" : "$mavenReleaseUrl"
            credentials {
                username = "$mavenUsername"
                password = "$mavenPassword"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifact bootJar
            artifact verifierStubsJar
        }
    }
}